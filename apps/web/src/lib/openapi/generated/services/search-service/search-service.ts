/**
 * Generated by orval 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 * Environment configuration for endpoints

 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useQuery } from '@tanstack/react-query'
import { useCallback } from 'react'
import { useApiAxios } from '../../../axios/useApiAxios'
import type { ErrorResponse, GetSearchParams, SearchListResponse } from '../../models'

/**
 * @summary Search for screens
 */
export const useGetSearchHook = () => {
  const getSearch = useApiAxios<SearchListResponse>()

  return useCallback(
    (params?: GetSearchParams, signal?: AbortSignal) => {
      return getSearch({ url: `/v1/search`, method: 'GET', params, signal })
    },
    [getSearch]
  )
}

export const getGetSearchQueryKey = (params?: GetSearchParams) => {
  return [`/v1/search`, ...(params ? [params] : [])] as const
}

export const useGetSearchQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>,
  TError = ErrorResponse,
>(
  params?: GetSearchParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError, TData>>
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetSearchQueryKey(params)

  const getSearch = useGetSearchHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>> = ({ signal }) =>
    getSearch(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSearchQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>>
export type GetSearchQueryError = ErrorResponse

export function useGetSearch<TData = Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError = ErrorResponse>(
  params: undefined | GetSearchParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError, TData>,
        'initialData'
      >
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetSearch<TData = Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError = ErrorResponse>(
  params?: GetSearchParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError, TData>,
        'initialData'
      >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetSearch<TData = Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError = ErrorResponse>(
  params?: GetSearchParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError, TData>>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Search for screens
 */

export function useGetSearch<TData = Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError = ErrorResponse>(
  params?: GetSearchParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError, TData>>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetSearchQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
