/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './../routes/__root'

const ScreensLazyRouteImport = createFileRoute('/screens')()
const HelpLazyRouteImport = createFileRoute('/help')()
const ContactLazyRouteImport = createFileRoute('/contact')()
const IndexLazyRouteImport = createFileRoute('/')()
const ScreensIndexLazyRouteImport = createFileRoute('/screens/')()

const ScreensLazyRoute = ScreensLazyRouteImport.update({
  id: '/screens',
  path: '/screens',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./../routes/screens.lazy').then((d) => d.Route))
const HelpLazyRoute = HelpLazyRouteImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./../routes/help.lazy').then((d) => d.Route))
const ContactLazyRoute = ContactLazyRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./../routes/contact.lazy').then((d) => d.Route))
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./../routes/index.lazy').then((d) => d.Route))
const ScreensIndexLazyRoute = ScreensIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ScreensLazyRoute,
} as any).lazy(() =>
  import('./../routes/screens/index.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/contact': typeof ContactLazyRoute
  '/help': typeof HelpLazyRoute
  '/screens': typeof ScreensLazyRouteWithChildren
  '/screens/': typeof ScreensIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/contact': typeof ContactLazyRoute
  '/help': typeof HelpLazyRoute
  '/screens': typeof ScreensIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/contact': typeof ContactLazyRoute
  '/help': typeof HelpLazyRoute
  '/screens': typeof ScreensLazyRouteWithChildren
  '/screens/': typeof ScreensIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/contact' | '/help' | '/screens' | '/screens/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/contact' | '/help' | '/screens'
  id: '__root__' | '/' | '/contact' | '/help' | '/screens' | '/screens/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ContactLazyRoute: typeof ContactLazyRoute
  HelpLazyRoute: typeof HelpLazyRoute
  ScreensLazyRoute: typeof ScreensLazyRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/screens': {
      id: '/screens'
      path: '/screens'
      fullPath: '/screens'
      preLoaderRoute: typeof ScreensLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/screens/': {
      id: '/screens/'
      path: '/'
      fullPath: '/screens/'
      preLoaderRoute: typeof ScreensIndexLazyRouteImport
      parentRoute: typeof ScreensLazyRoute
    }
  }
}

interface ScreensLazyRouteChildren {
  ScreensIndexLazyRoute: typeof ScreensIndexLazyRoute
}

const ScreensLazyRouteChildren: ScreensLazyRouteChildren = {
  ScreensIndexLazyRoute: ScreensIndexLazyRoute,
}

const ScreensLazyRouteWithChildren = ScreensLazyRoute._addFileChildren(
  ScreensLazyRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ContactLazyRoute: ContactLazyRoute,
  HelpLazyRoute: HelpLazyRoute,
  ScreensLazyRoute: ScreensLazyRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
