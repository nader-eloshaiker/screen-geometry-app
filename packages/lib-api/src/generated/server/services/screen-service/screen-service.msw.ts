/**
 * Generated by orval 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 * Environment configuration for endpoints

 */
import { HttpResponse, delay, http } from 'msw'

import type { ScreenIdResponse, ScreenItemResponse } from '../../models'

export const getCreateScreenResponseMock = (): ScreenItemResponse => ({
  item: {
    id: '5HjERJbH',
    specs: {
      hSize: 34.9275111406862,
      vSize: 14.968933346008372,
      hAspectRatio: 21,
      vAspectRatio: 9,
      ppi: 109.47368421052632,
    },
    data: { diagonalSize: 38, aspectRatio: '21:9', hRes: 3840, vRes: 1600 },
    color: { lightColor: '#F6693C', darkColor: '#C33609' },
    signature: 'dSize=38&aRatio=21:9&hRes=3840&vRes=1600',
    visible: true,
  },
})

export const getShowScreenResponseMock = (): ScreenItemResponse => ({
  item: {
    id: '5HjERJbH',
    specs: {
      hSize: 34.9275111406862,
      vSize: 14.968933346008372,
      hAspectRatio: 21,
      vAspectRatio: 9,
      ppi: 109.47368421052632,
    },
    data: { diagonalSize: 38, aspectRatio: '21:9', hRes: 3840, vRes: 1600 },
    color: { lightColor: '#F6693C', darkColor: '#C33609' },
    signature: 'dSize=38&aRatio=21:9&hRes=3840&vRes=1600',
    visible: false,
  },
})

export const getGetScreenResponseMock = (): ScreenItemResponse => ({
  item: {
    id: '5HjERJbH',
    specs: {
      hSize: 34.9275111406862,
      vSize: 14.968933346008372,
      hAspectRatio: 21,
      vAspectRatio: 9,
      ppi: 109.47368421052632,
    },
    data: { diagonalSize: 38, aspectRatio: '21:9', hRes: 3840, vRes: 1600 },
    color: { lightColor: '#F6693C', darkColor: '#C33609' },
    signature: 'dSize=38&aRatio=21:9&hRes=3840&vRes=1600',
    visible: true,
  },
})

export const getUpdateScreenResponseMock = (): ScreenItemResponse => ({
  item: {
    id: '5HjERJbH',
    specs: {
      hSize: 34.9275111406862,
      vSize: 14.968933346008372,
      hAspectRatio: 21,
      vAspectRatio: 9,
      ppi: 109.47368421052632,
    },
    data: { diagonalSize: 38, aspectRatio: '21:9', hRes: 3840, vRes: 1600 },
    color: { lightColor: '#F6693C', darkColor: '#C33609' },
    signature: 'dSize=38&aRatio=21:9&hRes=3840&vRes=1600',
    visible: true,
  },
})

export const getDeleteScreenResponseMock = (): ScreenIdResponse => ({ id: '5HjERJbH' })

export const getCreateScreenMockHandler = (
  overrideResponse?:
    | ScreenItemResponse
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ScreenItemResponse> | ScreenItemResponse)
) => {
  return http.post('*/v1/screen', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateScreenResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    )
  })
}

export const getShowScreenMockHandler = (
  overrideResponse?:
    | ScreenItemResponse
    | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<ScreenItemResponse> | ScreenItemResponse)
) => {
  return http.patch('*/v1/screen/:id/show', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getShowScreenResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    )
  })
}

export const getGetScreenMockHandler = (
  overrideResponse?:
    | ScreenItemResponse
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ScreenItemResponse> | ScreenItemResponse)
) => {
  return http.get('*/v1/screen/:id', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetScreenResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    )
  })
}

export const getUpdateScreenMockHandler = (
  overrideResponse?:
    | ScreenItemResponse
    | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ScreenItemResponse> | ScreenItemResponse)
) => {
  return http.put('*/v1/screen/:id', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateScreenResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    )
  })
}

export const getDeleteScreenMockHandler = (
  overrideResponse?:
    | ScreenIdResponse
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ScreenIdResponse> | ScreenIdResponse)
) => {
  return http.delete('*/v1/screen/:id', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteScreenResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    )
  })
}
export const getScreenServiceMock = () => [
  getCreateScreenMockHandler(),
  getShowScreenMockHandler(),
  getGetScreenMockHandler(),
  getUpdateScreenMockHandler(),
  getDeleteScreenMockHandler(),
]
