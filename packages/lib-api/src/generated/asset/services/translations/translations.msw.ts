/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Static Files Fetcher
 * Environment configuration for endpoints

 */
import { faker } from '@faker-js/faker'

import { HttpResponse, delay, http } from 'msw'

import type { Translations } from '../../models'

export const getGetTranslationsResponseMock = (overrideResponse: Partial<Translations> = {}): Translations => ({
  'home.content.callToAction': faker.string.alpha({ length: { min: 10, max: 20 } }),
  'home.content.heading': faker.string.alpha({ length: { min: 10, max: 20 } }),
  'home.content.p1': faker.string.alpha({ length: { min: 10, max: 20 } }),
  'home.content.p2': faker.string.alpha({ length: { min: 10, max: 20 } }),
  'home.content.p3': faker.string.alpha({ length: { min: 10, max: 20 } }),
  'home.content.p4': faker.string.alpha({ length: { min: 10, max: 20 } }),
  'home.content.solutation': faker.string.alpha({ length: { min: 10, max: 20 } }),
  'home.demo-image.caption': faker.string.alpha({ length: { min: 10, max: 20 } }),
  'home.sign-off.l1': faker.string.alpha({ length: { min: 10, max: 20 } }),
  'home.sign-off.l2': faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
})

export const getGetTranslationsMockHandler = (
  overrideResponse?:
    | Translations
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Translations> | Translations)
) => {
  return http.get('*/locales/:locale.json', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTranslationsResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    )
  })
}
export const getTranslationsMock = () => [getGetTranslationsMockHandler()]
