/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Static Files Fetcher
 * Environment configuration for endpoints

 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useQuery } from '@tanstack/react-query'

import type { Translations } from '../../models'

import { assetApiClient } from '../../../../axios/apiClient'

/**
 * Returns the translations
 * @summary Get Translations
 */
export const getTranslations = (locale: string, signal?: AbortSignal) => {
  return assetApiClient<Translations>({ url: `/locales/${locale}.json`, method: 'GET', signal })
}

export const getGetTranslationsQueryKey = (locale: string) => {
  return [`/locales/${locale}.json`] as const
}

export const getGetTranslationsQueryOptions = <TData = Awaited<ReturnType<typeof getTranslations>>, TError = unknown>(
  locale: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTranslations>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetTranslationsQueryKey(locale)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTranslations>>> = ({ signal }) =>
    getTranslations(locale, signal)

  return { queryKey, queryFn, enabled: !!locale, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTranslations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTranslationsQueryResult = NonNullable<Awaited<ReturnType<typeof getTranslations>>>
export type GetTranslationsQueryError = unknown

export function useGetTranslations<TData = Awaited<ReturnType<typeof getTranslations>>, TError = unknown>(
  locale: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTranslations>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTranslations>>,
          TError,
          Awaited<ReturnType<typeof getTranslations>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTranslations<TData = Awaited<ReturnType<typeof getTranslations>>, TError = unknown>(
  locale: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTranslations>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTranslations>>,
          TError,
          Awaited<ReturnType<typeof getTranslations>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTranslations<TData = Awaited<ReturnType<typeof getTranslations>>, TError = unknown>(
  locale: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTranslations>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Translations
 */

export function useGetTranslations<TData = Awaited<ReturnType<typeof getTranslations>>, TError = unknown>(
  locale: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTranslations>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTranslationsQueryOptions(locale, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
