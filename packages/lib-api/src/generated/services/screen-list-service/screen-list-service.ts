/**
 * Generated by orval 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 * Environment configuration for endpoints

 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'

import type { ErrorResponse, ScreenInputList, ScreenListResponse } from '../../models'

import { serverApiClient } from '../../../axios/apiClient'

/**
 * @summary Get a list of ScreenItem objects
 */
export const getScreenList = (signal?: AbortSignal) => {
  return serverApiClient<ScreenListResponse>({ url: `/v1/screens`, method: 'GET', signal })
}

export const getGetScreenListQueryKey = () => {
  return [`/v1/screens`] as const
}

export const getGetScreenListQueryOptions = <
  TData = Awaited<ReturnType<typeof getScreenList>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScreenList>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetScreenListQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getScreenList>>> = ({ signal }) => getScreenList(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getScreenList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetScreenListQueryResult = NonNullable<Awaited<ReturnType<typeof getScreenList>>>
export type GetScreenListQueryError = ErrorResponse

export function useGetScreenList<TData = Awaited<ReturnType<typeof getScreenList>>, TError = ErrorResponse>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScreenList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getScreenList>>,
          TError,
          Awaited<ReturnType<typeof getScreenList>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetScreenList<TData = Awaited<ReturnType<typeof getScreenList>>, TError = ErrorResponse>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScreenList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getScreenList>>,
          TError,
          Awaited<ReturnType<typeof getScreenList>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetScreenList<TData = Awaited<ReturnType<typeof getScreenList>>, TError = ErrorResponse>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScreenList>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a list of ScreenItem objects
 */

export function useGetScreenList<TData = Awaited<ReturnType<typeof getScreenList>>, TError = ErrorResponse>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScreenList>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetScreenListQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create a list of ScreenItem objects
 */
export const createScreenList = (screenInputList: ScreenInputList, signal?: AbortSignal) => {
  return serverApiClient<ScreenListResponse>({
    url: `/v1/screens`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: screenInputList,
    signal,
  })
}

export const getCreateScreenListMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createScreenList>>,
    TError,
    { data: ScreenInputList },
    TContext
  >
}): UseMutationOptions<Awaited<ReturnType<typeof createScreenList>>, TError, { data: ScreenInputList }, TContext> => {
  const mutationKey = ['createScreenList']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createScreenList>>, { data: ScreenInputList }> = (
    props
  ) => {
    const { data } = props ?? {}

    return createScreenList(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateScreenListMutationResult = NonNullable<Awaited<ReturnType<typeof createScreenList>>>
export type CreateScreenListMutationBody = ScreenInputList
export type CreateScreenListMutationError = ErrorResponse

/**
 * @summary Create a list of ScreenItem objects
 */
export const useCreateScreenList = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createScreenList>>,
      TError,
      { data: ScreenInputList },
      TContext
    >
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof createScreenList>>, TError, { data: ScreenInputList }, TContext> => {
  const mutationOptions = getCreateScreenListMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
