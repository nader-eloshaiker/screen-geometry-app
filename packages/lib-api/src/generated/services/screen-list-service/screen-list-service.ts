/**
 * Generated by orval 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 * Environment configuration for endpoints

 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import { useCallback } from 'react'
import { useApiAxios } from '../../../axios/useApiAxios'
import type { ErrorResponse, ScreenInputList, ScreenListResponse } from '../../models'

/**
 * @summary Get a list of ScreenItem objects
 */
export const useGetScreenListHook = () => {
  const getScreenList = useApiAxios<ScreenListResponse>()

  return useCallback(
    (signal?: AbortSignal) => {
      return getScreenList({ url: `/v1/screens`, method: 'GET', signal })
    },
    [getScreenList]
  )
}

export const getGetScreenListQueryKey = () => {
  return [`/v1/screens`] as const
}

export const useGetScreenListQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetScreenListQueryKey()

  const getScreenList = useGetScreenListHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>> = ({ signal }) =>
    getScreenList(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetScreenListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>>
export type GetScreenListQueryError = ErrorResponse

export function useGetScreenList<
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>,
      'initialData'
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetScreenList<
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>,
      'initialData'
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetScreenList<
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get a list of ScreenItem objects
 */

export function useGetScreenList<
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetScreenListQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create a list of ScreenItem objects
 */
export const useCreateScreenListHook = () => {
  const createScreenList = useApiAxios<ScreenListResponse>()

  return useCallback(
    (screenInputList: ScreenInputList) => {
      return createScreenList({
        url: `/v1/screens`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: screenInputList,
      })
    },
    [createScreenList]
  )
}

export const useCreateScreenListMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
    TError,
    { data: ScreenInputList },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
  TError,
  { data: ScreenInputList },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const createScreenList = useCreateScreenListHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
    { data: ScreenInputList }
  > = (props) => {
    const { data } = props ?? {}

    return createScreenList(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateScreenListMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>
>
export type CreateScreenListMutationBody = ScreenInputList
export type CreateScreenListMutationError = ErrorResponse

/**
 * @summary Create a list of ScreenItem objects
 */
export const useCreateScreenList = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
    TError,
    { data: ScreenInputList },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
  TError,
  { data: ScreenInputList },
  TContext
> => {
  const mutationOptions = useCreateScreenListMutationOptions(options)

  return useMutation(mutationOptions)
}
