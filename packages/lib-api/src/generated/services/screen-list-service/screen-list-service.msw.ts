/**
 * Generated by orval 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 * Environment configuration for endpoints

 */
import { HttpResponse, delay, http } from 'msw'
import type { ScreenListResponse } from '../../models'

export const getGetScreenListResponseMock = (): ScreenListResponse => ({
  list: [
    {
      id: 'pVesw1Iu',
      specs: {
        hSize: 31.25093102061397,
        vSize: 13.3932561516917,
        hAspectRatio: 21,
        vAspectRatio: 9,
        ppi: 109.68340725465096,
      },
      data: { diagonalSize: 34, aspectRatio: '21:9', hRes: 3440, vRes: 1440 },
      color: { lightColor: '#FCDF50', darkColor: '#967E03' },
      signature: 'dSize=34&aRatio=21:9&hRes=3440&vRes=1440',
      visible: true,
    },
    {
      id: '5HjERJbH',
      specs: {
        hSize: 34.9275111406862,
        vSize: 14.968933346008372,
        hAspectRatio: 21,
        vAspectRatio: 9,
        ppi: 109.47368421052632,
      },
      data: { diagonalSize: 38, aspectRatio: '21:9', hRes: 3840, vRes: 1600 },
      color: { lightColor: '#F6693C', darkColor: '#C33609' },
      signature: 'dSize=38&aRatio=21:9&hRes=3840&vRes=1600',
      visible: true,
    },
    {
      id: 'LnAg4nPQ',
      specs: {
        hSize: 23.53253950236283,
        vSize: 13.237053470079092,
        hAspectRatio: 16,
        vAspectRatio: 9,
        ppi: 163.17830889498507,
      },
      data: { diagonalSize: 27, aspectRatio: '16:9', hRes: 3840, vRes: 2160 },
      color: { lightColor: '#67E5AA', darkColor: '#168350' },
      signature: 'dSize=27&aRatio=16:9&hRes=3840&vRes=2160',
      visible: true,
    },
    {
      id: 'oxrH4rCU',
      specs: {
        hSize: 47.169896067541046,
        vSize: 13.26653326899592,
        hAspectRatio: 32,
        vAspectRatio: 9,
        ppi: 108.54380498674065,
      },
      data: { diagonalSize: 49, aspectRatio: '32:9', hRes: 5120, vRes: 1440 },
      color: { lightColor: '#64E8DD', darkColor: '#14857B' },
      signature: 'dSize=49&aRatio=32:9&hRes=5120&vRes=1440',
      visible: true,
    },
  ],
})

export const getCreateScreenListResponseMock = (): ScreenListResponse => ({
  list: [
    {
      id: 'pVesw1Iu',
      specs: {
        hSize: 31.25093102061397,
        vSize: 13.3932561516917,
        hAspectRatio: 21,
        vAspectRatio: 9,
        ppi: 109.68340725465096,
      },
      data: { diagonalSize: 34, aspectRatio: '21:9', hRes: 3440, vRes: 1440 },
      color: { lightColor: '#FCDF50', darkColor: '#967E03' },
      signature: 'dSize=34&aRatio=21:9&hRes=3440&vRes=1440',
      visible: true,
    },
    {
      id: '5HjERJbH',
      specs: {
        hSize: 34.9275111406862,
        vSize: 14.968933346008372,
        hAspectRatio: 21,
        vAspectRatio: 9,
        ppi: 109.47368421052632,
      },
      data: { diagonalSize: 38, aspectRatio: '21:9', hRes: 3840, vRes: 1600 },
      color: { lightColor: '#F6693C', darkColor: '#C33609' },
      signature: 'dSize=38&aRatio=21:9&hRes=3840&vRes=1600',
      visible: true,
    },
    {
      id: 'LnAg4nPQ',
      specs: {
        hSize: 23.53253950236283,
        vSize: 13.237053470079092,
        hAspectRatio: 16,
        vAspectRatio: 9,
        ppi: 163.17830889498507,
      },
      data: { diagonalSize: 27, aspectRatio: '16:9', hRes: 3840, vRes: 2160 },
      color: { lightColor: '#67E5AA', darkColor: '#168350' },
      signature: 'dSize=27&aRatio=16:9&hRes=3840&vRes=2160',
      visible: true,
    },
    {
      id: 'oxrH4rCU',
      specs: {
        hSize: 47.169896067541046,
        vSize: 13.26653326899592,
        hAspectRatio: 32,
        vAspectRatio: 9,
        ppi: 108.54380498674065,
      },
      data: { diagonalSize: 49, aspectRatio: '32:9', hRes: 5120, vRes: 1440 },
      color: { lightColor: '#64E8DD', darkColor: '#14857B' },
      signature: 'dSize=49&aRatio=32:9&hRes=5120&vRes=1440',
      visible: true,
    },
  ],
})

export const getGetScreenListMockHandler = (
  overrideResponse?:
    | ScreenListResponse
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ScreenListResponse> | ScreenListResponse)
) => {
  return http.get('*/v1/screens', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetScreenListResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    )
  })
}

export const getCreateScreenListMockHandler = (
  overrideResponse?:
    | ScreenListResponse
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ScreenListResponse> | ScreenListResponse)
) => {
  return http.post('*/v1/screens', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateScreenListResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    )
  })
}
export const getScreenListServiceMock = () => [getGetScreenListMockHandler(), getCreateScreenListMockHandler()]
