/**
 * Generated by orval 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 * Environment configuration for endpoints

 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'

import type { ErrorResponse, ScreenIdResponse, ScreenInput, ScreenItemResponse } from '../../models'

import { serverApiClient } from '../../../axios/apiClient'

/**
 * @summary Create a ScreenItem object
 */
export const createScreen = (screenInput: ScreenInput, signal?: AbortSignal) => {
  return serverApiClient<ScreenItemResponse>({
    url: `/v1/screen`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: screenInput,
    signal,
  })
}

export const getCreateScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createScreen>>, TError, { data: ScreenInput }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof createScreen>>, TError, { data: ScreenInput }, TContext> => {
  const mutationKey = ['createScreen']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createScreen>>, { data: ScreenInput }> = (props) => {
    const { data } = props ?? {}

    return createScreen(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateScreenMutationResult = NonNullable<Awaited<ReturnType<typeof createScreen>>>
export type CreateScreenMutationBody = ScreenInput
export type CreateScreenMutationError = ErrorResponse

/**
 * @summary Create a ScreenItem object
 */
export const useCreateScreen = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof createScreen>>, TError, { data: ScreenInput }, TContext>
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof createScreen>>, TError, { data: ScreenInput }, TContext> => {
  const mutationOptions = getCreateScreenMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Show a screen
 */
export const showScreen = (id: string) => {
  return serverApiClient<ScreenItemResponse>({ url: `/v1/screen/${id}/show`, method: 'PATCH' })
}

export const getShowScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof showScreen>>, TError, { id: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof showScreen>>, TError, { id: string }, TContext> => {
  const mutationKey = ['showScreen']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof showScreen>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return showScreen(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type ShowScreenMutationResult = NonNullable<Awaited<ReturnType<typeof showScreen>>>

export type ShowScreenMutationError = ErrorResponse

/**
 * @summary Show a screen
 */
export const useShowScreen = <TError = ErrorResponse, TContext = unknown>(
  options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof showScreen>>, TError, { id: string }, TContext> },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof showScreen>>, TError, { id: string }, TContext> => {
  const mutationOptions = getShowScreenMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get a screen by id
 */
export const getScreen = (id: string, signal?: AbortSignal) => {
  return serverApiClient<ScreenItemResponse>({ url: `/v1/screen/${id}`, method: 'GET', signal })
}

export const getGetScreenQueryKey = (id: string) => {
  return [`/v1/screen/${id}`] as const
}

export const getGetScreenQueryOptions = <TData = Awaited<ReturnType<typeof getScreen>>, TError = ErrorResponse>(
  id: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScreen>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetScreenQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getScreen>>> = ({ signal }) => getScreen(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getScreen>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetScreenQueryResult = NonNullable<Awaited<ReturnType<typeof getScreen>>>
export type GetScreenQueryError = ErrorResponse

export function useGetScreen<TData = Awaited<ReturnType<typeof getScreen>>, TError = ErrorResponse>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScreen>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getScreen>>, TError, Awaited<ReturnType<typeof getScreen>>>,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetScreen<TData = Awaited<ReturnType<typeof getScreen>>, TError = ErrorResponse>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScreen>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getScreen>>,
          TError,
          Awaited<ReturnType<typeof getScreen>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetScreen<TData = Awaited<ReturnType<typeof getScreen>>, TError = ErrorResponse>(
  id: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScreen>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a screen by id
 */

export function useGetScreen<TData = Awaited<ReturnType<typeof getScreen>>, TError = ErrorResponse>(
  id: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getScreen>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetScreenQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update a screen
 */
export const updateScreen = (id: string, screenInput: ScreenInput) => {
  return serverApiClient<ScreenItemResponse>({
    url: `/v1/screen/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: screenInput,
  })
}

export const getUpdateScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateScreen>>,
    TError,
    { id: string; data: ScreenInput },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateScreen>>,
  TError,
  { id: string; data: ScreenInput },
  TContext
> => {
  const mutationKey = ['updateScreen']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateScreen>>, { id: string; data: ScreenInput }> = (
    props
  ) => {
    const { id, data } = props ?? {}

    return updateScreen(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateScreenMutationResult = NonNullable<Awaited<ReturnType<typeof updateScreen>>>
export type UpdateScreenMutationBody = ScreenInput
export type UpdateScreenMutationError = ErrorResponse

/**
 * @summary Update a screen
 */
export const useUpdateScreen = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateScreen>>,
      TError,
      { id: string; data: ScreenInput },
      TContext
    >
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof updateScreen>>, TError, { id: string; data: ScreenInput }, TContext> => {
  const mutationOptions = getUpdateScreenMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete a screen
 */
export const deleteScreen = (id: string) => {
  return serverApiClient<ScreenIdResponse>({ url: `/v1/screen/${id}`, method: 'DELETE' })
}

export const getDeleteScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteScreen>>, TError, { id: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteScreen>>, TError, { id: string }, TContext> => {
  const mutationKey = ['deleteScreen']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteScreen>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return deleteScreen(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteScreenMutationResult = NonNullable<Awaited<ReturnType<typeof deleteScreen>>>

export type DeleteScreenMutationError = ErrorResponse

/**
 * @summary Delete a screen
 */
export const useDeleteScreen = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteScreen>>, TError, { id: string }, TContext>
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof deleteScreen>>, TError, { id: string }, TContext> => {
  const mutationOptions = getDeleteScreenMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
