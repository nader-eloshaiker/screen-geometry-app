name: CI

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  unit-test:
    name: Unit Tests
    uses: ./.github/workflows/task-test-unit.yml
    secrets: inherit

  component-test:
    name: Component Tests
    uses: ./.github/workflows/task-test-component.yml
    secrets: inherit

  e2e-test:
    name: E2E Tests
    uses: ./.github/workflows/task-test-e2e.yml
    secrets: inherit

  manage-release:
    needs: [unit-test, component-test, e2e-test]
    name: Manage Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prep Release
        id: generate_release
        uses: google-github-actions/release-please-action@v4
        with:
          # This is so that actions can run on the release PR
          token: ${{ secrets.ACTION_GITHUB_TOKEN }}
          # example, `main` or `1.x`
          target-branch: ${{ github.ref_name }}
          release-type: "node"
          # ensure all committed files are considered for release
          path: "."

      - name: "Output Step"
        env:
          NEW_TAG: ${{ steps.generate_release.outputs.tag_name }}
        run: echo "new tag [$NEW_TAG] created for $REPO_NAME"

  deploy-storybook:
    needs: [manage-release]
    name: Deploy StoryBook
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      deployments: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run pnpm report
        run: pnpm run --filter @screengeometry/lib-ui  sb:build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./packages/lib-ui/storybook-static"

      - name: Deploy to reports to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-app:
    needs: [manage-release]
    name: Deploy to Develop
    runs-on: ubuntu-latest
    environment: stage
    permissions:
      contents: read
      pages: write
      id-token: write
      deployments: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run pnpm build:dev
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: pnpm build:dev

      - name: List build files
        run: |
          ls -laR apps/web/dist/

      - name: Create env folder
        run: |
          mkdir -p apps/web/dist/env

      - name: Create config.json
        id: env-create-json
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: "config.json"
          json: '{"ENV_TYPE":"${{ vars.ENV_TYPE }}", "SERVER_API_URL":"${{ vars.SERVER_API_URL }}", "GA_TRACKING_ID":"${{ vars.GA_TRACKING_ID }}"}'
          dir: "apps/web/dist/env/"

      - name: List build files
        run: |
          ls -laR apps/web/dist/

      - name: Deploy App
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: apps/web
          packageManager: pnpm
          wranglerVersion: latest
          command: pages deploy dist --project-name=screengeometry --branch=develop
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Print Deployment URL
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.deployment-url }}
          DEPLOYMENT_ALIAS_URL: ${{ steps.deploy.outputs.pages-deployment-alias-url }}
        run: |
          echo $DEPLOYMENT_URL
          echo $DEPLOYMENT_ALIAS_URL
