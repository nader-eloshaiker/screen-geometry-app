# Simple workflow for deploying static content to GitHub Pages
name: Stage

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - 'develop'

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'deploy'
  cancel-in-progress: false

jobs:
  # validate_build:
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #   uses: ./.github/workflows/validation.yml

  version_management:
    name: Version Management
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    # needs: [validate_build]
    steps:
      - name: Calculate repo short name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Prep Release
        id: generate_release
        uses: google-github-actions/release-please-action@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          package-name: ${{ env.REPO_NAME }}
          release-type: 'node'

      - name: 'Output Step'
        env:
          NEW_TAG: ${{ steps.generate_release.outputs.tag_name }}
        run: echo "new tag $NEW_TAG"

  deploy_reports:
    name: Deploy Reports
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      deployments: write
    needs: [version_management]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Run pnpm install
        run: pnpm install

      - name: Run pnpm report
        run: pnpm report

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './reports'

      - name: Deploy to reports to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  stagging:
    name: Deploy Build to Stagging
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      deployments: write
    needs: [version_management]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Run pnpm install
        run: pnpm install

      - name: Run pnpm build
        run: pnpm build

      - name: Deploy app to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: f00d9267a758bc42b9ef03e97b077541
          projectName: screengeometry
          directory: ./dist
          branch: develop
          wranglerVersion: '3'
          # Optional: Enable this if you want to have GitHub Deployments triggered
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
