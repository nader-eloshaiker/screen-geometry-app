/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 * OpenAPI spec version: 1.0.0
 */
import type { DataBaseEntry } from '@models/Database'
import type { ErrorResponse } from '@openapi/generated/models'
import {
  useQuery,
  type QueryFunction,
  type QueryKey,
  type UseQueryOptions,
  type UseQueryResult,
} from '@tanstack/react-query'
import useApiAxios from '../../hooks/api/useApiAxios'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useSearchListHook = () => {
  const searchList = useApiAxios<Array<DataBaseEntry>>()

  return (signal?: AbortSignal) => {
    return searchList({ url: '/db/monitor.json', baseURL: '', method: 'get', signal })
  }
}

export const getSearchListQueryKey = () => ['/searchlist'] as const

export const useSearchListQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSearchListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSearchListHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSearchListHook>>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSearchListQueryKey()

  const listScreens = useSearchListHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useSearchListHook>>>> = ({ signal }) =>
    listScreens(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type SearchListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSearchListHook>>>>
export type SearchListQueryError = ErrorResponse

export const useSearchList = <
  TData = Awaited<ReturnType<ReturnType<typeof useSearchListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSearchListHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSearchListQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
