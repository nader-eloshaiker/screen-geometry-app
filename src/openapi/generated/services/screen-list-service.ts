/**
 * Generated by orval 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 */
import { faker } from '@faker-js/faker'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import { HttpResponse, delay, http } from 'msw'
import { useApiAxios } from '../../../hooks/api/useApiAxios'
import type { ErrorResponse, ScreenInputList, ScreenListResponse } from '../models'

export const useGetScreenListHook = () => {
  const getScreenList = useApiAxios<ScreenListResponse>()

  return (signal?: AbortSignal) => {
    return getScreenList({ url: `/screens`, method: 'GET', signal })
  }
}

export const getGetScreenListQueryKey = () => {
  return [`/screens`] as const
}

export const useGetScreenListQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetScreenListQueryKey()

  const getScreenList = useGetScreenListHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>> = ({ signal }) =>
    getScreenList(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetScreenListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>>
export type GetScreenListQueryError = ErrorResponse

export const useGetScreenList = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetScreenListQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useCreateScreenListHook = () => {
  const createScreenList = useApiAxios<ScreenListResponse>()

  return (screenInputList: ScreenInputList) => {
    return createScreenList({
      url: `/screens`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: screenInputList,
    })
  }
}

export const useCreateScreenListMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
    TError,
    { data: ScreenInputList },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
  TError,
  { data: ScreenInputList },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const createScreenList = useCreateScreenListHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
    { data: ScreenInputList }
  > = (props) => {
    const { data } = props ?? {}

    return createScreenList(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateScreenListMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>
>
export type CreateScreenListMutationBody = ScreenInputList
export type CreateScreenListMutationError = ErrorResponse

export const useCreateScreenList = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
    TError,
    { data: ScreenInputList },
    TContext
  >
}) => {
  const mutationOptions = useCreateScreenListMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getGetScreenListMock = () => ({
  list: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    color: { darkColor: faker.word.sample(), lightColor: faker.word.sample() },
    data: {
      hAspectRatio: faker.number.int({ min: 0, max: undefined }),
      hSize: faker.number.int({ min: 0, max: undefined }),
      vAspectRatio: faker.number.int({ min: 0, max: undefined }),
      vSize: faker.number.int({ min: 0, max: undefined }),
    },
    id: faker.word.sample(),
    render: faker.helpers.arrayElement([
      {
        height: faker.helpers.arrayElement([faker.number.int({ min: 0, max: undefined }), undefined]),
        pixelSize: faker.helpers.arrayElement([faker.number.int({ min: 0, max: undefined }), undefined]),
        width: faker.helpers.arrayElement([faker.number.int({ min: 0, max: undefined }), undefined]),
      },
      undefined,
    ]),
    spec: faker.helpers.arrayElement([
      {
        hRes: faker.number.int({ min: 0, max: undefined }),
        ppi: faker.number.int({ min: 0, max: undefined }),
        vRes: faker.number.int({ min: 0, max: undefined }),
      },
      undefined,
    ]),
    tag: { aspectRatio: faker.word.sample(), diagonalSize: faker.number.int({ min: 0, max: undefined }) },
    visible: faker.datatype.boolean(),
  })),
})

export const getCreateScreenListMock = () => ({
  list: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    color: { darkColor: faker.word.sample(), lightColor: faker.word.sample() },
    data: {
      hAspectRatio: faker.number.int({ min: 0, max: undefined }),
      hSize: faker.number.int({ min: 0, max: undefined }),
      vAspectRatio: faker.number.int({ min: 0, max: undefined }),
      vSize: faker.number.int({ min: 0, max: undefined }),
    },
    id: faker.word.sample(),
    render: faker.helpers.arrayElement([
      {
        height: faker.helpers.arrayElement([faker.number.int({ min: 0, max: undefined }), undefined]),
        pixelSize: faker.helpers.arrayElement([faker.number.int({ min: 0, max: undefined }), undefined]),
        width: faker.helpers.arrayElement([faker.number.int({ min: 0, max: undefined }), undefined]),
      },
      undefined,
    ]),
    spec: faker.helpers.arrayElement([
      {
        hRes: faker.number.int({ min: 0, max: undefined }),
        ppi: faker.number.int({ min: 0, max: undefined }),
        vRes: faker.number.int({ min: 0, max: undefined }),
      },
      undefined,
    ]),
    tag: { aspectRatio: faker.word.sample(), diagonalSize: faker.number.int({ min: 0, max: undefined }) },
    visible: faker.datatype.boolean(),
  })),
})

export const getScreenListServiceMock = () => [
  http.get('*/screens', async () => {
    await delay(1)
    return new HttpResponse(JSON.stringify(getGetScreenListMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
  http.post('*/screens', async () => {
    await delay(1)
    return new HttpResponse(JSON.stringify(getCreateScreenListMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
]
