/**
 * Generated by orval 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import { HttpResponse, delay, http } from 'msw'
import { useApiAxios } from '../../axios/useApiAxios'
import type { ErrorResponse, ScreenIdResponse, ScreenInput, ScreenItemResponse } from '../models'

export const useCreateScreenHook = () => {
  const createScreen = useApiAxios<ScreenItemResponse>()

  return (screenInput: ScreenInput) => {
    return createScreen({
      url: '/v1/screen',
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: screenInput,
    })
  }
}

export const useCreateScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenHook>>>,
    TError,
    { data: ScreenInput },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenHook>>>,
  TError,
  { data: ScreenInput },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const createScreen = useCreateScreenHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenHook>>>,
    { data: ScreenInput }
  > = (props) => {
    const { data } = props ?? {}

    return createScreen(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateScreenMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateScreenHook>>>>
export type CreateScreenMutationBody = ScreenInput
export type CreateScreenMutationError = ErrorResponse

export const useCreateScreen = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenHook>>>,
    TError,
    { data: ScreenInput },
    TContext
  >
}) => {
  const mutationOptions = useCreateScreenMutationOptions(options)

  return useMutation(mutationOptions)
}
export const useShowScreenHook = () => {
  const showScreen = useApiAxios<ScreenItemResponse>()

  return (id: string) => {
    return showScreen({ url: `/v1/screen/${id}/show`, method: 'PATCH' })
  }
}

export const useShowScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useShowScreenHook>>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useShowScreenHook>>>, TError, { id: string }, TContext> => {
  const { mutation: mutationOptions } = options ?? {}

  const showScreen = useShowScreenHook()

  const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useShowScreenHook>>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return showScreen(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type ShowScreenMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useShowScreenHook>>>>

export type ShowScreenMutationError = ErrorResponse

export const useShowScreen = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useShowScreenHook>>>,
    TError,
    { id: string },
    TContext
  >
}) => {
  const mutationOptions = useShowScreenMutationOptions(options)

  return useMutation(mutationOptions)
}
export const useGetScreenHook = () => {
  const getScreen = useApiAxios<ScreenItemResponse>()

  return (id: string, signal?: AbortSignal) => {
    return getScreen({ url: `/v1/screen/${id}`, method: 'GET', signal })
  }
}

export const getGetScreenQueryKey = (id: string) => {
  return [`/v1/screen/${id}`] as const
}

export const useGetScreenQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError, TData>>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetScreenQueryKey(id)

  const getScreen = useGetScreenHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>> = ({ signal }) =>
    getScreen(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetScreenQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>>
export type GetScreenQueryError = ErrorResponse

export const useGetScreen = <TData = Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError = ErrorResponse>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError, TData>>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetScreenQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useUpdateScreenHook = () => {
  const updateScreen = useApiAxios<ScreenItemResponse>()

  return (id: string, screenInput: ScreenInput) => {
    return updateScreen({
      url: `/v1/screen/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: screenInput,
    })
  }
}

export const useUpdateScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateScreenHook>>>,
    TError,
    { id: string; data: ScreenInput },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useUpdateScreenHook>>>,
  TError,
  { id: string; data: ScreenInput },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const updateScreen = useUpdateScreenHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useUpdateScreenHook>>>,
    { id: string; data: ScreenInput }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateScreen(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateScreenMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateScreenHook>>>>
export type UpdateScreenMutationBody = ScreenInput
export type UpdateScreenMutationError = ErrorResponse

export const useUpdateScreen = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateScreenHook>>>,
    TError,
    { id: string; data: ScreenInput },
    TContext
  >
}) => {
  const mutationOptions = useUpdateScreenMutationOptions(options)

  return useMutation(mutationOptions)
}
export const useDeleteScreenHook = () => {
  const deleteScreen = useApiAxios<ScreenIdResponse>()

  return (id: string) => {
    return deleteScreen({ url: `/v1/screen/${id}`, method: 'DELETE' })
  }
}

export const useDeleteScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteScreenHook>>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useDeleteScreenHook>>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const deleteScreen = useDeleteScreenHook()

  const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteScreenHook>>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return deleteScreen(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteScreenMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteScreenHook>>>>

export type DeleteScreenMutationError = ErrorResponse

export const useDeleteScreen = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteScreenHook>>>,
    TError,
    { id: string },
    TContext
  >
}) => {
  const mutationOptions = useDeleteScreenMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getCreateScreenMock = () => ({
  item: {
    id: 'ttUL6ooF',
    tag: { diagonalSize: 49, aspectRatio: '32:9' },
    data: { hSize: 47.169896067541046, vSize: 13.26653326899592, hAspectRatio: 32, vAspectRatio: 9 },
    spec: { hRes: 5120, vRes: 1440, ppi: 108.54380498674065 },
    color: { lightColor: '#64E8DD', darkColor: '#14857B' },
    visible: true,
    render: { width: 1, height: 0.6293053673644803 },
  },
})

export const getShowScreenMock = () => ({
  item: {
    id: '5HjERJbH',
    tag: { diagonalSize: 38, aspectRatio: '21:9' },
    data: { hSize: 34.9275111406862, vSize: 14.968933346008372, hAspectRatio: 21, vAspectRatio: 9 },
    spec: { hRes: 3840, vRes: 1600, ppi: 109.47368421052632 },
    color: { lightColor: '#F6693C', darkColor: '#C33609' },
    visible: false,
    render: { width: 0.7404619058450888, height: 0.7100596596986617 },
  },
})

export const getGetScreenMock = () => ({
  item: {
    id: '5HjERJbH',
    tag: { diagonalSize: 38, aspectRatio: '21:9' },
    data: { hSize: 34.9275111406862, vSize: 14.968933346008372, hAspectRatio: 21, vAspectRatio: 9 },
    spec: { hRes: 3840, vRes: 1600, ppi: 109.47368421052632 },
    color: { lightColor: '#F6693C', darkColor: '#C33609' },
    visible: true,
    render: { width: 0.7404619058450888, height: 0.7100596596986617 },
  },
})

export const getUpdateScreenMock = () => ({
  item: {
    id: '5HjERJbH',
    tag: { diagonalSize: 38, aspectRatio: '21:9' },
    data: { hSize: 34.9275111406862, vSize: 14.968933346008372, hAspectRatio: 21, vAspectRatio: 9 },
    spec: { hRes: 3840, vRes: 1600, ppi: 109.47368421052632 },
    color: { lightColor: '#F6693C', darkColor: '#C33609' },
    visible: true,
    render: { width: 0.7404619058450888, height: 0.7100596596986617 },
  },
})

export const getDeleteScreenMock = () => ({ id: '5HjERJbH' })

export const getScreenServiceMock = () => [
  http.post('*/v1/screen', async () => {
    await delay(10)
    return new HttpResponse(JSON.stringify(getCreateScreenMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
  http.patch('*/v1/screen/:id/show', async () => {
    await delay(10)
    return new HttpResponse(JSON.stringify(getShowScreenMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
  http.get('*/v1/screen/:id', async () => {
    await delay(10)
    return new HttpResponse(JSON.stringify(getGetScreenMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
  http.put('*/v1/screen/:id', async () => {
    await delay(10)
    return new HttpResponse(JSON.stringify(getUpdateScreenMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
  http.delete('*/v1/screen/:id', async () => {
    await delay(10)
    return new HttpResponse(JSON.stringify(getDeleteScreenMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
]
