/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import { useCustomAxios } from '../../../api/mutator/useCustomAxios'
import type { ErrorResponse, ScreenItemRespose, ScreenListResponse } from '../models'

export const useListScreensActionHook = () => {
  const listScreensAction = useCustomAxios<ScreenListResponse>()

  return (signal?: AbortSignal) => {
    return listScreensAction({ url: `/screens`, method: 'get', signal })
  }
}

export const getListScreensActionQueryKey = () => [`/screens`] as const

export const useListScreensActionQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useListScreensActionHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListScreensActionHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListScreensActionHook>>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListScreensActionQueryKey()

  const listScreensAction = useListScreensActionHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useListScreensActionHook>>>> = ({ signal }) =>
    listScreensAction(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type ListScreensActionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useListScreensActionHook>>>>
export type ListScreensActionQueryError = ErrorResponse

export const useListScreensAction = <
  TData = Awaited<ReturnType<ReturnType<typeof useListScreensActionHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListScreensActionHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useListScreensActionQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useCreateScreenActionHook = () => {
  const createScreenAction = useCustomAxios<ScreenItemRespose>()

  return () => {
    return createScreenAction({ url: `/screens`, method: 'post' })
  }
}

export const useCreateScreenActionMutationOptions = <
  TError = ErrorResponse,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenActionHook>>>,
    TError,
    TVariables,
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenActionHook>>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const createScreenAction = useCreateScreenActionHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenActionHook>>>,
    TVariables
  > = () => {
    return createScreenAction()
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateScreenActionMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenActionHook>>>
>

export type CreateScreenActionMutationError = ErrorResponse

export const useCreateScreenAction = <TError = ErrorResponse, TVariables = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenActionHook>>>,
    TError,
    TVariables,
    TContext
  >
}) => {
  const mutationOptions = useCreateScreenActionMutationOptions(options)

  return useMutation(mutationOptions)
}
