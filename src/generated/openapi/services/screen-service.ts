/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import { useApiAxios } from '../../../api/fetch/useApiAxios'
import type { ErrorResponse, ScreenIdResponse, ScreenItem, ScreenItemResponse } from '../models'

export const useFindScreenActionHook = () => {
  const findScreenAction = useApiAxios<ScreenItemResponse>()

  return (id: string, signal?: AbortSignal) => {
    return findScreenAction({ url: `/screen/${id}`, method: 'get', signal })
  }
}

export const getFindScreenActionQueryKey = (id: string) => [`/screen/${id}`] as const

export const useFindScreenActionQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useFindScreenActionHook>>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindScreenActionHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindScreenActionHook>>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindScreenActionQueryKey(id)

  const findScreenAction = useFindScreenActionHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindScreenActionHook>>>> = ({ signal }) =>
    findScreenAction(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions }
}

export type FindScreenActionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindScreenActionHook>>>>
export type FindScreenActionQueryError = ErrorResponse

export const useFindScreenAction = <
  TData = Awaited<ReturnType<ReturnType<typeof useFindScreenActionHook>>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindScreenActionHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useFindScreenActionQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useUpdateScreenActionHook = () => {
  const updateScreenAction = useApiAxios<ScreenItemResponse>()

  return (id: string, screenItem: ScreenItem) => {
    return updateScreenAction({
      url: `/screen/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: screenItem,
    })
  }
}

export const useUpdateScreenActionMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateScreenActionHook>>>,
    TError,
    { id: string; data: ScreenItem },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useUpdateScreenActionHook>>>,
  TError,
  { id: string; data: ScreenItem },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const updateScreenAction = useUpdateScreenActionHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useUpdateScreenActionHook>>>,
    { id: string; data: ScreenItem }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateScreenAction(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateScreenActionMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useUpdateScreenActionHook>>>
>
export type UpdateScreenActionMutationBody = ScreenItem
export type UpdateScreenActionMutationError = ErrorResponse

export const useUpdateScreenAction = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateScreenActionHook>>>,
    TError,
    { id: string; data: ScreenItem },
    TContext
  >
}) => {
  const mutationOptions = useUpdateScreenActionMutationOptions(options)

  return useMutation(mutationOptions)
}
export const useDeleteScreenActionHook = () => {
  const deleteScreenAction = useApiAxios<ScreenIdResponse>()

  return (id: string) => {
    return deleteScreenAction({ url: `/screen/${id}`, method: 'delete' })
  }
}

export const useDeleteScreenActionMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteScreenActionHook>>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useDeleteScreenActionHook>>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const deleteScreenAction = useDeleteScreenActionHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useDeleteScreenActionHook>>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return deleteScreenAction(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteScreenActionMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useDeleteScreenActionHook>>>
>

export type DeleteScreenActionMutationError = ErrorResponse

export const useDeleteScreenAction = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteScreenActionHook>>>,
    TError,
    { id: string },
    TContext
  >
}) => {
  const mutationOptions = useDeleteScreenActionMutationOptions(options)

  return useMutation(mutationOptions)
}
