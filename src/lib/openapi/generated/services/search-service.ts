/**
 * Generated by orval 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 */
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'
import { useQuery } from '@tanstack/react-query'
import { HttpResponse, delay, http } from 'msw'
import { useApiAxios } from '../../axios/useApiAxios'
import type { ErrorResponse, GetSearchParams, SearchListResponse } from '../models'

export const useGetSearchHook = () => {
  const getSearch = useApiAxios<SearchListResponse>()

  return (params?: GetSearchParams, signal?: AbortSignal) => {
    return getSearch({ url: `/v1/search`, method: 'GET', params, signal })
  }
}

export const getGetSearchQueryKey = (params?: GetSearchParams) => {
  return [`/v1/search`, ...(params ? [params] : [])] as const
}

export const useGetSearchQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>,
  TError = ErrorResponse,
>(
  params?: GetSearchParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError, TData>>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetSearchQueryKey(params)

  const getSearch = useGetSearchHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>> = ({ signal }) =>
    getSearch(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSearchQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>>
export type GetSearchQueryError = ErrorResponse

export const useGetSearch = <TData = Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError = ErrorResponse>(
  params?: GetSearchParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetSearchHook>>>, TError, TData>>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetSearchQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetSearchMock = () => ({
  list: [
    {
      id: 'WQHD3421:9',
      name: 'WQHD',
      label: 'WQHD 34" 3440x1440 21:9',
      aspectRatio: '21:9',
      diagonalSize: 34,
      vRes: 1440,
      hRes: 3440,
    },
    {
      id: 'WQHD+3821:9',
      name: 'WQHD+',
      label: 'WQHD+ 38" 3840x1600 21:9',
      aspectRatio: '21:9',
      diagonalSize: 38,
      vRes: 1600,
      hRes: 3840,
    },
    {
      id: '4KUHD2716:9',
      name: '4K UHD',
      label: '4K UHD 27" 3840x2160 16:9',
      aspectRatio: '16:9',
      diagonalSize: 27,
      vRes: 2160,
      hRes: 3840,
    },
    {
      id: '4KUHD3216:9',
      name: '4K UHD',
      label: '4K UHD 32" 3840x2160 16:9',
      aspectRatio: '16:9',
      diagonalSize: 32,
      vRes: 2160,
      hRes: 3840,
    },
  ],
})

export const getSearchServiceMock = () => [
  http.get('*/v1/search', async () => {
    await delay(10)
    return new HttpResponse(JSON.stringify(getGetSearchMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
]
