/**
 * Generated by orval 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import { HttpResponse, delay, http } from 'msw'
import { useCallback } from 'react'
import { useApiAxios } from '../../axios/useApiAxios'
import type { ErrorResponse, ScreenIdResponse, ScreenInput, ScreenItemResponse } from '../models'

export const useCreateScreenHook = () => {
  const createScreen = useApiAxios<ScreenItemResponse>()

  return useCallback(
    (screenInput: ScreenInput) => {
      return createScreen({
        url: `/v1/screen`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: screenInput,
      })
    },
    [createScreen],
  )
}

export const useCreateScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenHook>>>,
    TError,
    { data: ScreenInput },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenHook>>>,
  TError,
  { data: ScreenInput },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const createScreen = useCreateScreenHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenHook>>>,
    { data: ScreenInput }
  > = (props) => {
    const { data } = props ?? {}

    return createScreen(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateScreenMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateScreenHook>>>>
export type CreateScreenMutationBody = ScreenInput
export type CreateScreenMutationError = ErrorResponse

export const useCreateScreen = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenHook>>>,
    TError,
    { data: ScreenInput },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenHook>>>,
  TError,
  { data: ScreenInput },
  TContext
> => {
  const mutationOptions = useCreateScreenMutationOptions(options)

  return useMutation(mutationOptions)
}
export const useShowScreenHook = () => {
  const showScreen = useApiAxios<ScreenItemResponse>()

  return useCallback(
    (id: string) => {
      return showScreen({ url: `/v1/screen/${id}/show`, method: 'PATCH' })
    },
    [showScreen],
  )
}

export const useShowScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useShowScreenHook>>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useShowScreenHook>>>, TError, { id: string }, TContext> => {
  const { mutation: mutationOptions } = options ?? {}

  const showScreen = useShowScreenHook()

  const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useShowScreenHook>>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return showScreen(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type ShowScreenMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useShowScreenHook>>>>

export type ShowScreenMutationError = ErrorResponse

export const useShowScreen = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useShowScreenHook>>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationResult<Awaited<ReturnType<ReturnType<typeof useShowScreenHook>>>, TError, { id: string }, TContext> => {
  const mutationOptions = useShowScreenMutationOptions(options)

  return useMutation(mutationOptions)
}
export const useGetScreenHook = () => {
  const getScreen = useApiAxios<ScreenItemResponse>()

  return useCallback(
    (id: string, signal?: AbortSignal) => {
      return getScreen({ url: `/v1/screen/${id}`, method: 'GET', signal })
    },
    [getScreen],
  )
}

export const getGetScreenQueryKey = (id: string) => {
  return [`/v1/screen/${id}`] as const
}

export const useGetScreenQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>,
  TError = ErrorResponse,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError, TData>>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetScreenQueryKey(id)

  const getScreen = useGetScreenHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>> = ({ signal }) =>
    getScreen(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetScreenQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>>
export type GetScreenQueryError = ErrorResponse

export function useGetScreen<TData = Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError = ErrorResponse>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError, TData>,
        'initialData'
      >
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetScreen<TData = Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError = ErrorResponse>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError, TData>,
        'initialData'
      >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetScreen<TData = Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError = ErrorResponse>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError, TData>>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetScreen<TData = Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError = ErrorResponse>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenHook>>>, TError, TData>>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetScreenQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useUpdateScreenHook = () => {
  const updateScreen = useApiAxios<ScreenItemResponse>()

  return useCallback(
    (id: string, screenInput: ScreenInput) => {
      return updateScreen({
        url: `/v1/screen/${id}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: screenInput,
      })
    },
    [updateScreen],
  )
}

export const useUpdateScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateScreenHook>>>,
    TError,
    { id: string; data: ScreenInput },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useUpdateScreenHook>>>,
  TError,
  { id: string; data: ScreenInput },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const updateScreen = useUpdateScreenHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useUpdateScreenHook>>>,
    { id: string; data: ScreenInput }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateScreen(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateScreenMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateScreenHook>>>>
export type UpdateScreenMutationBody = ScreenInput
export type UpdateScreenMutationError = ErrorResponse

export const useUpdateScreen = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateScreenHook>>>,
    TError,
    { id: string; data: ScreenInput },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useUpdateScreenHook>>>,
  TError,
  { id: string; data: ScreenInput },
  TContext
> => {
  const mutationOptions = useUpdateScreenMutationOptions(options)

  return useMutation(mutationOptions)
}
export const useDeleteScreenHook = () => {
  const deleteScreen = useApiAxios<ScreenIdResponse>()

  return useCallback(
    (id: string) => {
      return deleteScreen({ url: `/v1/screen/${id}`, method: 'DELETE' })
    },
    [deleteScreen],
  )
}

export const useDeleteScreenMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteScreenHook>>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useDeleteScreenHook>>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const deleteScreen = useDeleteScreenHook()

  const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteScreenHook>>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return deleteScreen(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteScreenMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteScreenHook>>>>

export type DeleteScreenMutationError = ErrorResponse

export const useDeleteScreen = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteScreenHook>>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useDeleteScreenHook>>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = useDeleteScreenMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getCreateScreenResponseMock = (): ScreenItemResponse => ({
  item: {
    id: 'ttUL6ooF',
    specs: {
      hSize: 47.169896067541046,
      vSize: 13.26653326899592,
      hAspectRatio: 32,
      vAspectRatio: 9,
      ppi: 108.54380498674065,
    },
    data: { diagonalSize: 49, aspectRatio: '32:9', hRes: 5120, vRes: 1440 },
    color: { lightColor: '#64E8DD', darkColor: '#14857B' },
    signature: 'dSize=49&aRatio=32:9&hRes=5120&vRes=1440',
    visible: true,
  },
})

export const getShowScreenResponseMock = (): ScreenItemResponse => ({
  item: {
    id: '5HjERJbH',
    specs: {
      hSize: 34.9275111406862,
      vSize: 14.968933346008372,
      hAspectRatio: 21,
      vAspectRatio: 9,
      ppi: 109.47368421052632,
    },
    data: { diagonalSize: 38, aspectRatio: '21:9', hRes: 3840, vRes: 1600 },
    color: { lightColor: '#F6693C', darkColor: '#C33609' },
    signature: 'dSize=38&aRatio=21:9&hRes=3840&vRes=1600',
    visible: false,
  },
})

export const getGetScreenResponseMock = (): ScreenItemResponse => ({
  item: {
    id: '5HjERJbH',
    specs: {
      hSize: 34.9275111406862,
      vSize: 14.968933346008372,
      hAspectRatio: 21,
      vAspectRatio: 9,
      ppi: 109.47368421052632,
    },
    data: { diagonalSize: 38, aspectRatio: '21:9', hRes: 3840, vRes: 1600 },
    color: { lightColor: '#F6693C', darkColor: '#C33609' },
    signature: 'dSize=38&aRatio=21:9&hRes=3840&vRes=1600',
    visible: true,
  },
})

export const getUpdateScreenResponseMock = (): ScreenItemResponse => ({
  item: {
    id: '5HjERJbH',
    specs: {
      hSize: 34.9275111406862,
      vSize: 14.968933346008372,
      hAspectRatio: 21,
      vAspectRatio: 9,
      ppi: 109.47368421052632,
    },
    data: { diagonalSize: 38, aspectRatio: '21:9', hRes: 3840, vRes: 1600 },
    color: { lightColor: '#F6693C', darkColor: '#C33609' },
    signature: 'dSize=38&aRatio=21:9&hRes=3840&vRes=1600',
    visible: true,
  },
})

export const getDeleteScreenResponseMock = (): ScreenIdResponse => ({ id: '5HjERJbH' })

export const getCreateScreenMockHandler = (
  overrideResponse?:
    | ScreenItemResponse
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ScreenItemResponse> | ScreenItemResponse),
) => {
  return http.post('*/v1/screen', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateScreenResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getShowScreenMockHandler = (
  overrideResponse?:
    | ScreenItemResponse
    | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<ScreenItemResponse> | ScreenItemResponse),
) => {
  return http.patch('*/v1/screen/:id/show', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getShowScreenResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetScreenMockHandler = (
  overrideResponse?:
    | ScreenItemResponse
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ScreenItemResponse> | ScreenItemResponse),
) => {
  return http.get('*/v1/screen/:id', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetScreenResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getUpdateScreenMockHandler = (
  overrideResponse?:
    | ScreenItemResponse
    | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ScreenItemResponse> | ScreenItemResponse),
) => {
  return http.put('*/v1/screen/:id', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateScreenResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeleteScreenMockHandler = (
  overrideResponse?:
    | ScreenIdResponse
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ScreenIdResponse> | ScreenIdResponse),
) => {
  return http.delete('*/v1/screen/:id', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteScreenResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getScreenServiceMock = () => [
  getCreateScreenMockHandler(),
  getShowScreenMockHandler(),
  getGetScreenMockHandler(),
  getUpdateScreenMockHandler(),
  getDeleteScreenMockHandler(),
]
