/**
 * Generated by orval 🍺
 * Do not edit manually.
 * screen-geometry-app-backend-serverless-apis-v1
 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import { HttpResponse, delay, http } from 'msw'
import { useCallback } from 'react'
import { useApiAxios } from '../../axios/useApiAxios'
import type { ErrorResponse, ScreenInputList, ScreenListResponse } from '../models'

export const useGetScreenListHook = () => {
  const getScreenList = useApiAxios<ScreenListResponse>()

  return useCallback(
    (signal?: AbortSignal) => {
      return getScreenList({ url: `/v1/screens`, method: 'GET', signal })
    },
    [getScreenList],
  )
}

export const getGetScreenListQueryKey = () => {
  return [`/v1/screens`] as const
}

export const useGetScreenListQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetScreenListQueryKey()

  const getScreenList = useGetScreenListHook()

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>> = ({ signal }) =>
    getScreenList(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetScreenListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>>
export type GetScreenListQueryError = ErrorResponse

export function useGetScreenList<
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>,
      'initialData'
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetScreenList<
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>,
      'initialData'
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetScreenList<
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetScreenList<
  TData = Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetScreenListHook>>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetScreenListQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useCreateScreenListHook = () => {
  const createScreenList = useApiAxios<ScreenListResponse>()

  return useCallback(
    (screenInputList: ScreenInputList) => {
      return createScreenList({
        url: `/v1/screens`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: screenInputList,
      })
    },
    [createScreenList],
  )
}

export const useCreateScreenListMutationOptions = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
    TError,
    { data: ScreenInputList },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
  TError,
  { data: ScreenInputList },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const createScreenList = useCreateScreenListHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
    { data: ScreenInputList }
  > = (props) => {
    const { data } = props ?? {}

    return createScreenList(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateScreenListMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>
>
export type CreateScreenListMutationBody = ScreenInputList
export type CreateScreenListMutationError = ErrorResponse

export const useCreateScreenList = <TError = ErrorResponse, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
    TError,
    { data: ScreenInputList },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useCreateScreenListHook>>>,
  TError,
  { data: ScreenInputList },
  TContext
> => {
  const mutationOptions = useCreateScreenListMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getGetScreenListResponseMock = (): ScreenListResponse => ({
  list: [
    {
      id: 'pVesw1Iu',
      specs: {
        hSize: 31.25093102061397,
        vSize: 13.3932561516917,
        hAspectRatio: 21,
        vAspectRatio: 9,
        ppi: 109.68340725465096,
      },
      data: { diagonalSize: 34, aspectRatio: '21:9', hRes: 3440, vRes: 1440 },
      color: { lightColor: '#FCDF50', darkColor: '#967E03' },
      signature: 'dSize=34&aRatio=21:9&hRes=3440&vRes=1440',
      visible: true,
    },
    {
      id: '5HjERJbH',
      specs: {
        hSize: 34.9275111406862,
        vSize: 14.968933346008372,
        hAspectRatio: 21,
        vAspectRatio: 9,
        ppi: 109.47368421052632,
      },
      data: { diagonalSize: 38, aspectRatio: '21:9', hRes: 3840, vRes: 1600 },
      color: { lightColor: '#F6693C', darkColor: '#C33609' },
      signature: 'dSize=38&aRatio=21:9&hRes=3840&vRes=1600',
      visible: true,
    },
    {
      id: 'LnAg4nPQ',
      specs: {
        hSize: 23.53253950236283,
        vSize: 13.237053470079092,
        hAspectRatio: 16,
        vAspectRatio: 9,
        ppi: 163.17830889498507,
      },
      data: { diagonalSize: 27, aspectRatio: '16:9', hRes: 3840, vRes: 2160 },
      color: { lightColor: '#67E5AA', darkColor: '#168350' },
      signature: 'dSize=27&aRatio=16:9&hRes=3840&vRes=2160',
      visible: true,
    },
    {
      id: 'oxrH4rCU',
      specs: {
        hSize: 47.169896067541046,
        vSize: 13.26653326899592,
        hAspectRatio: 32,
        vAspectRatio: 9,
        ppi: 108.54380498674065,
      },
      data: { diagonalSize: 49, aspectRatio: '32:9', hRes: 5120, vRes: 1440 },
      color: { lightColor: '#64E8DD', darkColor: '#14857B' },
      signature: 'dSize=49&aRatio=32:9&hRes=5120&vRes=1440',
      visible: true,
    },
  ],
})

export const getCreateScreenListResponseMock = (): ScreenListResponse => ({
  list: [
    {
      id: 'pVesw1Iu',
      specs: {
        hSize: 31.25093102061397,
        vSize: 13.3932561516917,
        hAspectRatio: 21,
        vAspectRatio: 9,
        ppi: 109.68340725465096,
      },
      data: { diagonalSize: 34, aspectRatio: '21:9', hRes: 3440, vRes: 1440 },
      color: { lightColor: '#FCDF50', darkColor: '#967E03' },
      signature: 'dSize=34&aRatio=21:9&hRes=3440&vRes=1440',
      visible: true,
    },
    {
      id: '5HjERJbH',
      specs: {
        hSize: 34.9275111406862,
        vSize: 14.968933346008372,
        hAspectRatio: 21,
        vAspectRatio: 9,
        ppi: 109.47368421052632,
      },
      data: { diagonalSize: 38, aspectRatio: '21:9', hRes: 3840, vRes: 1600 },
      color: { lightColor: '#F6693C', darkColor: '#C33609' },
      signature: 'dSize=38&aRatio=21:9&hRes=3840&vRes=1600',
      visible: true,
    },
    {
      id: 'LnAg4nPQ',
      specs: {
        hSize: 23.53253950236283,
        vSize: 13.237053470079092,
        hAspectRatio: 16,
        vAspectRatio: 9,
        ppi: 163.17830889498507,
      },
      data: { diagonalSize: 27, aspectRatio: '16:9', hRes: 3840, vRes: 2160 },
      color: { lightColor: '#67E5AA', darkColor: '#168350' },
      signature: 'dSize=27&aRatio=16:9&hRes=3840&vRes=2160',
      visible: true,
    },
    {
      id: 'oxrH4rCU',
      specs: {
        hSize: 47.169896067541046,
        vSize: 13.26653326899592,
        hAspectRatio: 32,
        vAspectRatio: 9,
        ppi: 108.54380498674065,
      },
      data: { diagonalSize: 49, aspectRatio: '32:9', hRes: 5120, vRes: 1440 },
      color: { lightColor: '#64E8DD', darkColor: '#14857B' },
      signature: 'dSize=49&aRatio=32:9&hRes=5120&vRes=1440',
      visible: true,
    },
  ],
})

export const getGetScreenListMockHandler = (
  overrideResponse?:
    | ScreenListResponse
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ScreenListResponse> | ScreenListResponse),
) => {
  return http.get('*/v1/screens', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetScreenListResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreateScreenListMockHandler = (
  overrideResponse?:
    | ScreenListResponse
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ScreenListResponse> | ScreenListResponse),
) => {
  return http.post('*/v1/screens', async (info) => {
    await delay(10)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateScreenListResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getScreenListServiceMock = () => [getGetScreenListMockHandler(), getCreateScreenListMockHandler()]
